name: CI

on:
  push:
    branches:
      - master
 # pull_request:
 #   branches:
 #     - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04] #[ubuntu-20.04, macos-latest, windows-latest]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13' 

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libudev-dev libusb-1.0-0-dev libboost-all-dev libfuse2 fuse3
        sudo apt-get install -y qt5-default qttools5-dev qtdeclarative5-dev libqt5svg5-dev libqt5opengl5-dev cmake
        sudo apt-get install -y qml-module-qtquick2 qml-module-qtquick-extras qml-module-qtquick-window2 qml-module-qtquick-controls2 qml-module-qtquick-controls qml-module-qtgraphicaleffects  
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install libusb qt@5 boost
        brew upgrade qt@5
        brew link libusb
        brew link qt
        echo "/usr/local/opt/qt/bin" >> $GITHUB_PATH

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install innosetup
        choco install 7zip
        choco install git
        choco install msys2
        refreshenv
        C:\msys64\usr\bin\bash -lc "pacman -Syu --noconfirm"
        C:\msys64\usr\bin\bash -lc "pacman --noconfirm -Sy mingw-w64-i686-boost mingw-w64-i686-python3 mingw-w64-i686-libzip mingw-w64-i686-icu"
        C:\msys64\usr\bin\bash -lc "pacman --noconfirm -Sy mingw-w64-x86_64-boost mingw-w64-x86_64-python3 mingw-w64-x86_64-libzip mingw-w64-x86_64-icu mingw-w64-x86_64-toolchain"

    - name: Clone and build libsmu (Linux and macOS)
      if: runner.os != 'Windows'
      run: |
        git clone https://github.com/sounddrill31/libsmu.git
        cd libsmu
        mkdir build && cd build
        cmake -DBUILD_PYTHON=OFF -DCMAKE_INSTALL_PREFIX=/usr/ ..
        make
        sudo make install
        cd ../..

    - name: Clone and build libsmu (Windows)
      if: runner.os == 'Windows'
      run: |
        git clone https://github.com/sounddrill31/libsmu.git C:\projects\libsmu
        mkdir C:\projects\libsmu\build && cd C:\projects\libsmu\build
        cmake -G "MinGW Makefiles" -DCMAKE_INSTALL_PREFIX=C:\msys64\mingw64 -DCMAKE_C_COMPILER=C:\msys64\mingw64\bin\x86_64-w64-mingw32-gcc.exe -DCMAKE_CXX_COMPILER=C:\msys64\mingw64\bin\x86_64-w64-mingw32-g++.exe -DBUILD_PYTHON=OFF ..
        mingw32-make
        mingw32-make install
        cd C:\projects\libsmu

    - name: Build Pixelpulse2 (Linux and macOS)
      if: runner.os != 'Windows'
      run: |
        mkdir build && cd build
        cmake ..
        make
        sudo make install
        cd ..

    - name: Build Pixelpulse2 (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir C:\projects\pixelpulse2\build && cd C:\projects\pixelpulse2\build
        cmake -G "MinGW Makefiles" -DCMAKE_INSTALL_PREFIX=C:\msys64\mingw64 -DCMAKE_C_COMPILER=C:\msys64\mingw64\bin\x86_64-w64-mingw32-gcc.exe -DCMAKE_CXX_COMPILER=C:\msys64\mingw64\bin\x86_64-w64-mingw32-g++.exe ..
        mingw32-make

    - name: Run macOS specific steps
      if: runner.os == 'macOS'
      run: |
        cd build
        /usr/local/opt/qt/bin/macdeployqt pixelpulse2.app -always-overwrite -verbose=2 -qmldir=../qml
        cd ..
        libsmupath="$(otool -L ./build/pixelpulse2.app/Contents/MacOS/pixelpulse2 | grep libsmu | cut -d " " -f 1)"
        libsmuid="$(echo ${libsmupath} | rev | cut -d "/" -f 1 | rev)"
        cp libsmu/build/src/${libsmuid} build/pixelpulse2.app/Contents/Frameworks/
        sudo install_name_tool -id @executable_path/../Frameworks/${libsmuid} build/pixelpulse2.app/Contents/Frameworks/${libsmuid}
        sudo install_name_tool -change ${libsmupath} @executable_path/../Frameworks/${libsmuid} build/pixelpulse2.app/Contents/MacOS/Pixelpulse2
        cd build
        /usr/local/opt/qt/bin/macdeployqt pixelpulse2.app -dmg -no-plugins
        for x in *.dmg ; do mv $x ${x%.dmg}${LDIST}.dmg ; done
        cd ..

    - name: Create Windows installer
      if: runner.os == 'Windows'
      run: |
        cd C:\projects\pixelpulse2\build
        "C:\Program Files (x86)\Inno Setup 5\ISCC.exe" pixelpulse2.iss

    - name: Upload Release Asset (macOS)
      if: runner.os == 'macOS'
      uses: softprops/action-gh-release@v1
      with:
        files: build/*.dmg
        name: pixelpulse2-${{ github.ref_name }}.dmg
        tag_name: ${{ github.run_id }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset (Windows)
      if: runner.os == 'Windows'
      uses: softprops/action-gh-release@v1
      with:
        files: build/Pixelpulse2_win_setup.exe
        name: pixelpulse2-${{ github.ref_name }}.exe
        tag_name: ${{ github.run_id }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create AppImage with Dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
          # Prepare AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/lib
          mkdir -p AppDir/usr/lib/x86_64-linux-gnu/
          mkdir -p AppDir/usr/share/icons/hicolor/apps/scalable
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/pixelpulse2/

          # Copy libsmu library
          cp /usr/lib/x86_64-linux-gnu/libsmu.so.1.0.4 AppDir/usr/lib/x86_64-linux-gnu/
          ln -s AppDir/usr/lib/x86_64-linux-gnu/libsmu.so.1.0.4 AppDir/usr/lib/x86_64-linux-gnu/libsmu.so.1
          ln -s AppDir/usr/lib/x86_64-linux-gnu/libsmu.so.1.0.4 AppDir/usr/lib/x86_64-linux-gnu/libsmu.so

          # Copy Pixelpulse2 binary
          cp /usr/bin/pixelpulse2 AppDir/usr/bin/

          # Copy icon
          cp /usr/share/icons/hicolor/apps/scalable/pp2.ico AppDir/usr/share/icons/hicolor/apps/scalable/

          # Create .desktop file
          cp debian/*.desktop AppDir/usr/share/applications/pixelpulse2.desktop 

          # Ensure executable permissions
          chmod +x AppDir/usr/bin/pixelpulse2

          # Copy key system libraries that might not be auto-detected
          # Note: Be selective and only include necessary libraries
          cp /usr/lib/x86_64-linux-gnu/libudev.so.1 AppDir/usr/lib/
          cp /usr/lib/x86_64-linux-gnu/libusb-1.0.so.0 AppDir/usr/lib/

          # Copy udev rules
          mkdir -p AppDir/etc/udev/rules.d
          cp /etc/udev/rules.d/53-adi-m1k-usb.rules AppDir/etc/udev/rules.d/

          wget -O linuxdeploy.AppImage https://github.com/linuxdeploy/linuxdeploy/releases/download/2.0.0-alpha-1-20241106/linuxdeploy-x86_64.AppImage
          wget -O linuxdeploy-plugin-qt.AppImage https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/2.0.0-alpha-1-20241106/linuxdeploy-plugin-qt-x86_64.AppImage
          # Create the AppImage with Qt plugin to handle Qt dependencies
          chmod +x linuxdeploy*.AppImage

          cp -r qml AppDir/usr/share/pixelpulse2/

          export EXTRA_QT_MODULES+=quick
          export EXTRA_QT_MODULES+=graphicaleffects

          ARCH=x86_64 \
          VERSION=1.0 \
          ./linuxdeploy.AppImage \
          --appdir AppDir \
          --plugin qt \
          --output appimage -i debian/*.png

          # List the generated AppImage
          ls -l Pixelpulse2*.AppImage

    - name: Verify AppImage Dependencies
      if: runner.os == 'Linux'
      run: |
            # Check library dependencies
            ldd AppDir/usr/bin/pixelpulse2

            # Verify AppImage can be mounted and executed
            chmod +x Pixelpulse2*.AppImage
            ./Pixelpulse2*.AppImage --help || true

    - name: Upload Release Asset (Linux/AppImage)
      if: runner.os == 'linux'
      uses: softprops/action-gh-release@v1
      with:
        files: Pixelpulse2*.AppImage
        name: pixelpulse2-${{ github.ref_name }}.AppImage
        tag_name: ${{ github.run_id }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
